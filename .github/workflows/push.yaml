name: Push Action

on:
  push:
    branches:
      - main

env:
  node_version: '18.x'
  app_name: 'ui'

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}
          cache: 'npm'

      - name: Cache node_modules
        id: cache-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ env.node_version }}-build-${{ hashFiles('package.json') }}

      - name: Install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Format
        run: npm run format

      - name: Build
        run: npm run build

      - name: Unit Tests
        run: npm run test

      - name: Upload Artifacts for Publishing
        uses: actions/upload-artifact@v3
        with:
          name: dist-folders
          path: packages/**/dist

  # TODO - Test and build Storybook
  #      - name: Storybook Tests
  #        run: npm run storybook:test

      - name: Storybook Build
        run: npm run storybook:build

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: storybooks
          path:  packages/**/storybook-static

  publish-packages:
    name: Publish NPM Package
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - uses: actions/checkout@v3

      - name: Cache node_modules
        id: cache-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ env.node_version }}-build-${{ hashFiles('package.json') }}

      - name: Install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Download Artifacts from Build Job
        uses: actions/download-artifact@v3
        with:
          name: dist-folders
          path: packages/

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}
          registry-url: https://registry.npmjs.org/

      - run: lerna publish minor --yes --create-release github --conventional-commits true --summary-file PUBLISHED_PACKAGES
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm_token }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload PUBLISHED_PACKAGES Artifact
        uses: actions/upload-artifact@v3
        with:
          name: published_packages
          path: PUBLISHED_PACKAGES

  publish-storybook:
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - name: Download Artifact from Build Job
        uses: actions/download-artifact@v3
        with:
          name: storybooks
          path: packages/

      - name: Upload to Blob Storage
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob delete-batch --sas-token ${{ secrets.AZURE_STORAGE_CREDENTIALS }} --account-name ${{ vars.AZURE_STORAGE_ACCOUNT }} --source ${{ vars.BUNDLES_CONTAINER_NAME}} --pattern "bundles/${{ env.app_name }}/main/*"
            az storage blob upload-batch --sas-token ${{ secrets.AZURE_STORAGE_CREDENTIALS }} --account-name ${{ vars.AZURE_STORAGE_ACCOUNT }} --auth-mode key -d ${{ vars.BUNDLES_CONTAINER_NAME}} --destination-path "bundles/${{ env.app_name }}/main" -s ./packages --pattern **/storybook-static/*
#
#  release:
#    runs-on: ubuntu-latest
#    needs:
#      - publish-storybook
#      - publish-packages
#    name: Release
#    env:
#      # TODO - how do we handle versioning? - Lerna?
#      tag_version: 'test'
#    steps:
#      - name: Release
#        uses: softprops/action-gh-release@v1
#        with:
#          tag_name: ${{ env.tag_version }}
#          body: |
#            Release of ${{ env.tag_version }}
